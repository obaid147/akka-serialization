akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    provider = remote

    allow-java-serialization = off

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo // switch the default serializer to kryo
    }

    kryo {
      type = "graph" // can serialize objects with shared or cyclic dependencies; alternative nograph, faster
      idstrategy = "incremental" // one of the fastest; alternative "explicit"

      post-serialization-transformations = "lz4,aes" // compression (LZ4) and encryption (AES)
      // don't use transformations with persistence actors.

      kryo-trace = true // for debugging
      use-manifests = true // attach the class name to the serialization if set true
      implicit-registration-logging = true // see how the standard classes/types are being registered

      mappings { // optional for idstrategy "incremental", mandatory for "explicit"
        "serialization.Book" = 19
        # no need add mapping to every single class as we use idstrategy as "incremental"
      }

      classes = [ # pre-registring class, kryo know how to serialize & deserialize a class
        "serialization.Book"
      ] # if it's an empty array then
    }

  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical.hostname = "localhost"
      canonical.port = 0
    }
  }
}